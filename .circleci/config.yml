# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.1

jobs:
  build-ami:
    parameters:
      packer_version:
        type: string
        description: Packer linux amd64 version to use
        default: 1.9.4
      kubernetes_version:
        type: string
        description: The EKS version we're building against
      kubernetes_environment:
        type: string
        description: The values that go here are `staging` or `production`
        default: staging
      kubernetes_build_date:
        type: string
        description: Date is the set as a path to the s3 repository
      instance_type:
        type: string
        description: The instance type to build against
      ami_preffix:
        type: string
        description: The AMI prefix that will be used, the suffix is the commit shorthash
      ami_architecture:
        type: string
        description: Which architecture are we building against? x86_64
        default: x86_64
      docker_registry_proxy_set:
        type: string
        description: Which docker proxy registry are we using
        default: "yes"
      docker_registry_proxy_url:
        type: string
        description: Which docker registry are we using
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - run:
          name: install required packages and hashicorp packer
          command: |
            sudo apt-get install build-essential unzip -y
            cd /tmp && \
            curl -LO https://releases.hashicorp.com/packer/<<parameters.packer_version>>/packer_<<parameters.packer_version>>_linux_amd64.zip && \
            unzip packer_<<parameters.packer_version>>_linux_amd64.zip && \
            sudo mv packer /usr/bin && \
            rm packer_<<parameters.packer_version>>_linux_amd64.zip
            packer version
            packer plugins install github.com/hashicorp/amazon
      - run:
          name: create and publish EKS AMI using packer
          command: |
            export USER="CircleCI"
            export DIR="/etc/containerd/certs.d/docker.io"
            export FILE="$DIR/hosts.toml"
            export KUBERNETES_ENVIRONMENT="<<parameters.kubernetes_environment>>"
            export DOCKER_REGISTRY_PROXY_SET="<<parameters.docker_registry_proxy_set>>"
            export __DOCKERHUB_PROXY_URL__="<<parameters.docker_registry_proxy_url>>"
            envsubst < templates/shared/provisioners/dockerhub-proxy.sh > /tmp/f.sh
            mv /tmp/f.sh templates/shared/provisioners/dockerhub-proxy.sh
            make k8s kubernetes_version=<<parameters.kubernetes_version>> \
                     kubernetes_build_date=<<parameters.kubernetes_build_date>> \
                     arch=<<parameters.ami_architecture>> \
                     ami_name=<<parameters.ami_preffix>>-<<parameters.kubernetes_environment>>-<<parameters.kubernetes_version>>-${CIRCLE_SHA1:0:9} \
                     instance_type=<<parameters.instance_type>>

workflows:
  build:
    jobs:
      - build-ami: &build-ami-staging
          name: Build AMI for staging
          kubernetes_version: "1.27.12"
          kubernetes_build_date: "2024-04-19"
          instance_type: c5a.xlarge
          kubernetes_environment: staging
          docker_registry_proxy_url: "https://dockerhub-proxy.us-east-1-a.stg.aws.gather.town"
          ami_preffix: dockerhub-proxy
          filters:
            branches:
              only:
                - main
                - staging
                - panagiotis/ap-southeast-dockerhub-proxy
      # - build-ami-production:
      #     <<: *rollbacks-k8s-staging
      #     kubernetes_environment: production
      #     docker_registry_proxy_url: "https://dockerhub-proxy.us-east-1-a.prod.aws.gather.town"
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - staging
      #           - panagiotis/ap-southeast-dockerhub-proxy
